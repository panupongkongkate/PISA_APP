@page "/manage-teachers"
@using PISA_APP.Models
@using PISA_APP.Services
@using System.ComponentModel.DataAnnotations
@inject MockDataService MockDataService
@inject AuthenticationService AuthService
@inject IJSRuntime JSRuntime

<PageTitle>จัดการครู/อาจารย์</PageTitle>

@if (!AuthService.IsAdmin())
{
    <div class="alert alert-danger">
        <i class="fas fa-exclamation-triangle"></i>
        คุณไม่มีสิทธิ์เข้าถึงหน้านี้ เฉพาะผู้ดูแลระบบเท่านั้น
    </div>
    return;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-chalkboard-teacher text-primary"></i> จัดการครู/อาจารย์</h2>
                <button class="btn btn-primary" @onclick="ShowAddTeacherModal">
                    <i class="fas fa-plus"></i> เพิ่มครู/อาจารย์ใหม่
                </button>
            </div>

            @if (!string.IsNullOrEmpty(alertMessage))
            {
                <div class="alert @alertClass alert-dismissible fade show" role="alert">
                    <i class="fas @alertIcon"></i>
                    @alertMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }


            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4>@teachers.Count</h4>
                                    <p class="mb-0">ครู/อาจารย์ทั้งหมด</p>
                                </div>
                                <i class="fas fa-chalkboard-teacher fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4>@teachers.Count(t => t.IsActive)</h4>
                                    <p class="mb-0">ใช้งานได้</p>
                                </div>
                                <i class="fas fa-check-circle fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4>@teachers.Count(t => t.AssignedSubjectIds.Any())</h4>
                                    <p class="mb-0">มีวิชาที่สอน</p>
                                </div>
                                <i class="fas fa-book fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4>@teachers.Count(t => t.CreatedDate >= DateTime.Today.AddDays(-30))</h4>
                                    <p class="mb-0">เพิ่มในเดือนนี้</p>
                                </div>
                                <i class="fas fa-calendar-plus fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Teachers Table -->
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-table"></i> รายการครู/อาจารย์</h5>
                </div>
                <div class="card-body">
                    <PaginatedTable TItem="Teacher" 
                                    Items="teachers"
                                    SearchPlaceholder="ค้นหาครู/อาจารย์ (ชื่อ, อีเมล)..."
                                    SearchFilter="TeacherSearchFilter"
                                    FilterOptions="teacherFilterOptions"
                                    ItemFilter="TeacherItemFilter"
                                    OnPaginationChanged="OnPaginationChanged">
                        <TableHeader>
                            <thead class="table-dark">
                                <tr>
                                    <th><i class="fas fa-user"></i> ชื่อผู้ใช้</th>
                                    <th><i class="fas fa-id-card"></i> ชื่อ-นามสกุล</th>
                                    <th><i class="fas fa-envelope"></i> อีเมล</th>
                                    <th><i class="fas fa-phone"></i> เบอร์โทร</th>
                                    <th><i class="fas fa-book"></i> วิชาที่สอน</th>
                                    <th><i class="fas fa-toggle-on"></i> สถานะ</th>
                                    <th><i class="fas fa-cogs"></i> การจัดการ</th>
                                </tr>
                            </thead>
                        </TableHeader>
                        <TableRow Context="teacher">
                            <tr class="@(!teacher.IsActive ? "table-secondary" : "")">
                                <td>
                                    <strong>@teacher.Username</strong>
                                </td>
                                <td>@teacher.FullName</td>
                                <td>
                                    <a href="mailto:@teacher.Email" class="text-decoration-none">
                                        @teacher.Email
                                    </a>
                                </td>
                                <td>@teacher.PhoneNumber</td>
                                <td>
                                    @if (teacher.AssignedSubjectIds.Any())
                                    {
                                        var teacherSubjects = allSubjects.Where(s => teacher.AssignedSubjectIds.Contains(s.Id)).ToList();
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var subject in teacherSubjects.Take(2))
                                            {
                                                <span class="badge bg-secondary">@subject.Code</span>
                                            }
                                            @if (teacherSubjects.Count > 2)
                                            {
                                                <span class="badge bg-info">+@(teacherSubjects.Count - 2)</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">ยังไม่มีวิชาที่สอน</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-@(teacher.IsActive ? "success" : "danger")">
                                        @(teacher.IsActive ? "ใช้งานได้" : "ปิดใช้งาน")
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-outline-primary btn-sm"
                                                @onclick="() => ViewTeacherDetails(teacher)"
                                                title="ดูรายละเอียด">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-warning btn-sm"
                                                @onclick="() => ShowEditTeacherModal(teacher)"
                                                title="แก้ไข">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-info btn-sm"
                                                @onclick="() => ShowAssignSubjectsModal(teacher)"
                                                title="มอบหมายวิชา">
                                            <i class="fas fa-book"></i>
                                        </button>
                                        <button class="btn btn-outline-@(teacher.IsActive ? "secondary" : "success") btn-sm"
                                                @onclick="() => ToggleTeacherStatus(teacher)"
                                                title="@(teacher.IsActive ? "ปิดใช้งาน" : "เปิดใช้งาน")">
                                            <i class="fas fa-@(teacher.IsActive ? "ban" : "check")"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm"
                                                @onclick="() => ShowDeleteConfirmation(teacher)"
                                                title="ลบ">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        </TableRow>
                    </PaginatedTable>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Teacher Modal -->
<div class="modal fade" id="teacherModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas @(isEditMode ? "fa-edit" : "fa-plus")"></i>
                    @(isEditMode ? "แก้ไขข้อมูลครู/อาจารย์" : "เพิ่มครู/อาจารย์ใหม่")
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <EditForm Model="teacherModel" OnValidSubmit="SaveTeacher">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">ชื่อผู้ใช้ <span class="text-danger">*</span></label>
                                <InputText class="form-control" @bind-Value="teacherModel.Username" />
                                <ValidationMessage For="@(() => teacherModel.Username)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">รหัสผ่าน <span class="text-danger">*</span></label>
                                <InputText type="password" class="form-control" @bind-Value="teacherModel.Password" />
                                <ValidationMessage For="@(() => teacherModel.Password)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label class="form-label">ชื่อ-นามสกุล <span class="text-danger">*</span></label>
                                <InputText class="form-control" @bind-Value="teacherModel.FullName" />
                                <ValidationMessage For="@(() => teacherModel.FullName)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">อีเมล <span class="text-danger">*</span></label>
                                <InputText type="email" class="form-control" @bind-Value="teacherModel.Email" />
                                <ValidationMessage For="@(() => teacherModel.Email)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">เบอร์โทรศัพท์</label>
                                <InputText class="form-control" @bind-Value="teacherModel.PhoneNumber" />
                                <ValidationMessage For="@(() => teacherModel.PhoneNumber)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label class="form-label">วิชาที่สอน</label>
                                <select multiple class="form-select" style="height: 120px;" @onchange="OnSubjectsChanged">
                                    @foreach (var subject in allSubjects)
                                    {
                                        <option value="@subject.Id" selected="@(teacherModel.AssignedSubjectIds.Contains(subject.Id))">
                                            @subject.Code - @subject.Name
                                        </option>
                                    }
                                </select>
                                <div class="form-text">กดปุ่ม Ctrl เพื่อเลือกหลายวิชา</div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="teacherModel.IsActive" />
                                <label class="form-check-label">เปิดใช้งาน</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> ยกเลิก
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> บันทึก
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Teacher Details Modal -->
<div class="modal fade" id="teacherDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-info-circle"></i>
                    รายละเอียดครู/อาจารย์: @selectedTeacher?.FullName
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (selectedTeacher != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <h6><i class="fas fa-user"></i> ข้อมูลส่วนตัว</h6>
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>ชื่อผู้ใช้:</strong></td>
                                    <td>@selectedTeacher.Username</td>
                                </tr>
                                <tr>
                                    <td><strong>ชื่อ-นามสกุล:</strong></td>
                                    <td>@selectedTeacher.FullName</td>
                                </tr>
                                <tr>
                                    <td><strong>อีเมล:</strong></td>
                                    <td>
                                        <a href="mailto:@selectedTeacher.Email">@selectedTeacher.Email</a>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>เบอร์โทร:</strong></td>
                                    <td>@selectedTeacher.PhoneNumber</td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6><i class="fas fa-info"></i> ข้อมูลระบบ</h6>
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>สิทธิ์:</strong></td>
                                    <td>
                                        <span class="badge bg-warning">
                                            <i class="fas fa-chalkboard-teacher"></i>
                                            ครู/อาจารย์
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>สถานะ:</strong></td>
                                    <td>
                                        <span class="badge bg-@(selectedTeacher.IsActive ? "success" : "danger")">
                                            @(selectedTeacher.IsActive ? "ใช้งานได้" : "ปิดใช้งาน")
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>วันที่สร้าง:</strong></td>
                                    <td>@selectedTeacher.CreatedDate.ToString("dd/MM/yyyy HH:mm")</td>
                                </tr>
                                <tr>
                                    <td><strong>ID:</strong></td>
                                    <td>@selectedTeacher.Id</td>
                                </tr>
                            </table>
                        </div>
                    </div>

                    <hr>

                    <h6><i class="fas fa-book"></i> วิชาที่สอน</h6>
                    @if (selectedTeacher.AssignedSubjectIds.Any())
                    {
                        var teacherSubjects = allSubjects.Where(s => selectedTeacher.AssignedSubjectIds.Contains(s.Id)).ToList();
                        <div class="row">
                            @foreach (var subject in teacherSubjects)
                            {
                                <div class="col-md-6 mb-2">
                                    <div class="card border-primary">
                                        <div class="card-body p-2">
                                            <h6 class="card-title mb-1">@subject.Code</h6>
                                            <p class="card-text small mb-0">@subject.Name</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center">ยังไม่มีวิชาที่สอน</p>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> ปิด
                </button>
                <button type="button" class="btn btn-warning" @onclick="() => ShowEditTeacherModal(selectedTeacher!)">
                    <i class="fas fa-edit"></i> แก้ไข
                </button>
                <button type="button" class="btn btn-info" @onclick="() => ShowAssignSubjectsModal(selectedTeacher!)">
                    <i class="fas fa-book"></i> มอบหมายวิชา
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Assign Subjects Modal -->
<div class="modal fade" id="assignSubjectsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-book"></i>
                    มอบหมายวิชาให้: @selectedTeacher?.FullName
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (selectedTeacher != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <h6>วิชาที่มีอยู่ทั้งหมด</h6>
                            <div class="list-group" style="max-height: 300px; overflow-y: auto;">
                                @foreach (var subject in allSubjects)
                                {
                                    <div class="list-group-item">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox"
                                                   id="subject_@subject.Id"
                                                   checked="@(tempAssignedSubjects.Contains(subject.Id))"
                                                   @onchange="@(e => ToggleSubjectAssignment(subject.Id, (bool)e.Value!))" />
                                            <label class="form-check-label" for="subject_@subject.Id">
                                                <strong>@subject.Code</strong> - @subject.Name
                                                <br>
                                                <small class="text-muted">@subject.Description</small>
                                            </label>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>วิชาที่เลือกแล้ว (@tempAssignedSubjects.Count วิชา)</h6>
                            <div class="border rounded p-3" style="min-height: 300px;">
                                @if (tempAssignedSubjects.Any())
                                {
                                    @foreach (var subjectId in tempAssignedSubjects)
                                    {
                                        var subject = allSubjects.FirstOrDefault(s => s.Id == subjectId);
                                        if (subject != null)
                                        {
                                            <div class="alert alert-primary d-flex justify-content-between align-items-center p-2 mb-2">
                                                <div>
                                                    <strong>@subject.Code</strong>
                                                    <br>
                                                    <small>@subject.Name</small>
                                                </div>
                                                <button class="btn btn-outline-danger btn-sm"
                                                        @onclick="() => ToggleSubjectAssignment(subjectId, false)">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        }
                                    }
                                }
                                else
                                {
                                    <p class="text-muted text-center mt-5">ยังไม่มีวิชาที่เลือก</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> ยกเลิก
                </button>
                <button type="button" class="btn btn-primary" @onclick="SaveSubjectAssignments">
                    <i class="fas fa-save"></i> บันทึก
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle text-danger"></i>
                    ยืนยันการลบ
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>คุณแน่ใจหรือไม่ที่จะลบครู/อาจารย์ <strong>@teacherToDelete?.FullName</strong>?</p>
                <p class="text-muted">การดำเนินการนี้ไม่สามารถย้อนกลับได้</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> ยกเลิก
                </button>
                <button type="button" class="btn btn-danger" @onclick="DeleteTeacher">
                    <i class="fas fa-trash"></i> ลบ
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    // Teacher form model
    public class TeacherFormModel
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "กรุณากรอกชื่อผู้ใช้")]
        [StringLength(50, ErrorMessage = "ชื่อผู้ใช้ต้องไม่เกิน 50 ตัวอักษร")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "กรุณากรอกรหัสผ่าน")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "รหัสผ่านต้องมีความยาว 6-100 ตัวอักษร")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "กรุณากรอกชื่อ-นามสกุล")]
        [StringLength(200, ErrorMessage = "ชื่อ-นามสกุลต้องไม่เกิน 200 ตัวอักษร")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "กรุณากรอกอีเมล")]
        [EmailAddress(ErrorMessage = "รูปแบบอีเมลไม่ถูกต้อง")]
        public string Email { get; set; } = string.Empty;

        [Phone(ErrorMessage = "รูปแบบเบอร์โทรไม่ถูกต้อง")]
        public string PhoneNumber { get; set; } = string.Empty;

        public bool IsActive { get; set; } = true;
        public List<int> AssignedSubjectIds { get; set; } = new();
    }

    private List<Teacher> teachers = new();
    private List<Subject> allSubjects = new();
    private Teacher? selectedTeacher;
    private Teacher? teacherToDelete;

    // Form data
    private TeacherFormModel teacherModel = new();
    private bool isEditMode = false;
    private List<int> tempAssignedSubjects = new();

    // Filter options for PaginatedTable
    private List<PaginatedTable<Teacher>.FilterOption> teacherFilterOptions = new();

    // Alert messages
    private string alertMessage = string.Empty;
    private string alertClass = string.Empty;
    private string alertIcon = string.Empty;

    protected override void OnInitialized()
    {
        LoadData();
        SetupFilterOptions();
    }

    private void LoadData()
    {
        teachers = MockDataService.GetUsersByRole(UserRole.Teacher).Cast<Teacher>().ToList();
        allSubjects = MockDataService.GetAllSubjects();
    }

    private void SetupFilterOptions()
    {
        teacherFilterOptions = new List<PaginatedTable<Teacher>.FilterOption>
        {
            new() { Value = "active", Text = "ใช้งานได้" },
            new() { Value = "inactive", Text = "ปิดใช้งาน" },
            new() { Value = "has_subjects", Text = "มีวิชาที่สอน" },
            new() { Value = "no_subjects", Text = "ยังไม่มีวิชาที่สอน" }
        };
    }

    private bool TeacherSearchFilter(Teacher teacher, string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return true;

        var term = searchTerm.ToLower();
        return teacher.Username.ToLower().Contains(term) ||
               teacher.FullName.ToLower().Contains(term) ||
               teacher.Email.ToLower().Contains(term) ||
               teacher.PhoneNumber.Contains(term);
    }

    private bool TeacherItemFilter(Teacher teacher, string filterValue)
    {
        return filterValue switch
        {
            "active" => teacher.IsActive,
            "inactive" => !teacher.IsActive,
            "has_subjects" => teacher.AssignedSubjectIds.Any(),
            "no_subjects" => !teacher.AssignedSubjectIds.Any(),
            _ => true
        };
    }

    private async Task OnPaginationChanged(PaginationModel pagination)
    {
        // Handle pagination change if needed
        await Task.CompletedTask;
    }

    private async Task ShowAddTeacherModal()
    {
        teacherModel = new TeacherFormModel();
        isEditMode = false;
        var modal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#teacherModal");
        await modal.InvokeVoidAsync("show");
    }

    private async Task ShowEditTeacherModal(Teacher teacher)
    {
        teacherModel = new TeacherFormModel
        {
            Id = teacher.Id,
            Username = teacher.Username,
            Password = teacher.Password,
            FullName = teacher.FullName,
            Email = teacher.Email,
            PhoneNumber = teacher.PhoneNumber,
            IsActive = teacher.IsActive,
            AssignedSubjectIds = new List<int>(teacher.AssignedSubjectIds)
        };
        isEditMode = true;
        var detailsModal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#teacherDetailsModal");
        await detailsModal.InvokeVoidAsync("hide");
        var modal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#teacherModal");
        await modal.InvokeVoidAsync("show");
    }

    private async Task ViewTeacherDetails(Teacher teacher)
    {
        selectedTeacher = teacher;
        var modal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#teacherDetailsModal");
        await modal.InvokeVoidAsync("show");
    }

    private async Task ShowAssignSubjectsModal(Teacher teacher)
    {
        selectedTeacher = teacher;
        tempAssignedSubjects = new List<int>(teacher.AssignedSubjectIds);
        var detailsModal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#teacherDetailsModal");
        await detailsModal.InvokeVoidAsync("hide");
        var assignModal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#assignSubjectsModal");
        await assignModal.InvokeVoidAsync("show");
    }

    private async Task ShowDeleteConfirmation(Teacher teacher)
    {
        teacherToDelete = teacher;
        var modal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#deleteConfirmModal");
        await modal.InvokeVoidAsync("show");
    }

    private void OnSubjectsChanged(ChangeEventArgs e)
    {
        if (e.Value is string[] selectedValues)
        {
            teacherModel.AssignedSubjectIds = selectedValues.Select(int.Parse).ToList();
        }
    }

    private void ToggleSubjectAssignment(int subjectId, bool isAssigned)
    {
        if (isAssigned)
        {
            if (!tempAssignedSubjects.Contains(subjectId))
            {
                tempAssignedSubjects.Add(subjectId);
            }
        }
        else
        {
            tempAssignedSubjects.Remove(subjectId);
        }
        StateHasChanged();
    }

    private async Task SaveSubjectAssignments()
    {
        if (selectedTeacher == null) return;

        try
        {
            selectedTeacher.AssignedSubjectIds = new List<int>(tempAssignedSubjects);
            MockDataService.UpdateUser(selectedTeacher);
            
            ShowAlert($"มอบหมายวิชาให้ {selectedTeacher.FullName} เรียบร้อยแล้ว", "success");
            
            var modal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#assignSubjectsModal");
            await modal.InvokeVoidAsync("hide");
            LoadData();
        }
        catch (Exception ex)
        {
            ShowAlert($"เกิดข้อผิดพลาด: {ex.Message}", "error");
        }
    }

    private async Task SaveTeacher()
    {
        try
        {
            // Check for duplicate username (excluding current user if editing)
            var existingUser = MockDataService.GetAllUsers()
                .FirstOrDefault(u => u.Username == teacherModel.Username && u.Id != teacherModel.Id);
            
            if (existingUser != null)
            {
                ShowAlert("ชื่อผู้ใช้นี้มีอยู่ในระบบแล้ว", "error");
                return;
            }

            // Check for duplicate email (excluding current user if editing)
            existingUser = MockDataService.GetAllUsers()
                .FirstOrDefault(u => u.Email == teacherModel.Email && u.Id != teacherModel.Id);
            
            if (existingUser != null)
            {
                ShowAlert("อีเมลนี้มีอยู่ในระบบแล้ว", "error");
                return;
            }

            if (isEditMode)
            {
                var existingTeacher = teachers.FirstOrDefault(t => t.Id == teacherModel.Id);
                if (existingTeacher != null)
                {
                    existingTeacher.Username = teacherModel.Username;
                    existingTeacher.Password = teacherModel.Password;
                    existingTeacher.FullName = teacherModel.FullName;
                    existingTeacher.Email = teacherModel.Email;
                    existingTeacher.PhoneNumber = teacherModel.PhoneNumber;
                    existingTeacher.IsActive = teacherModel.IsActive;
                    existingTeacher.AssignedSubjectIds = new List<int>(teacherModel.AssignedSubjectIds);
                    
                    MockDataService.UpdateUser(existingTeacher);
                    ShowAlert("แก้ไขข้อมูลครู/อาจารย์เรียบร้อยแล้ว", "success");
                }
            }
            else
            {
                var newTeacher = new Teacher
                {
                    Username = teacherModel.Username,
                    Password = teacherModel.Password,
                    FullName = teacherModel.FullName,
                    Email = teacherModel.Email,
                    PhoneNumber = teacherModel.PhoneNumber,
                    IsActive = teacherModel.IsActive,
                    AssignedSubjectIds = new List<int>(teacherModel.AssignedSubjectIds),
                    CreatedDate = DateTime.Now
                };

                MockDataService.AddUser(newTeacher);
                ShowAlert("เพิ่มครู/อาจารย์ใหม่เรียบร้อยแล้ว", "success");
            }

            var modal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#teacherModal");
            await modal.InvokeVoidAsync("hide");
            LoadData();
        }
        catch (Exception ex)
        {
            ShowAlert($"เกิดข้อผิดพลาด: {ex.Message}", "error");
        }
    }

    private async Task ToggleTeacherStatus(Teacher teacher)
    {
        try
        {
            teacher.IsActive = !teacher.IsActive;
            MockDataService.UpdateUser(teacher);
            
            var status = teacher.IsActive ? "เปิดใช้งาน" : "ปิดใช้งาน";
            ShowAlert($"{status}ครู/อาจารย์ {teacher.FullName} เรียบร้อยแล้ว", "success");
        }
        catch (Exception ex)
        {
            ShowAlert($"เกิดข้อผิดพลาด: {ex.Message}", "error");
        }
    }

    private async Task DeleteTeacher()
    {
        try
        {
            if (teacherToDelete == null) return;

            MockDataService.DeleteUser(teacherToDelete.Id);
            ShowAlert($"ลบครู/อาจารย์ {teacherToDelete.FullName} เรียบร้อยแล้ว", "success");

            var modal = await JSRuntime.InvokeAsync<IJSObjectReference>("bootstrap.Modal.getOrCreateInstance", "#deleteConfirmModal");
            await modal.InvokeVoidAsync("hide");
            
            LoadData();
            teacherToDelete = null;
        }
        catch (Exception ex)
        {
            ShowAlert($"เกิดข้อผิดพลาด: {ex.Message}", "error");
        }
    }

    private void ShowAlert(string message, string type)
    {
        alertMessage = message;
        alertClass = type switch
        {
            "success" => "alert-success",
            "error" => "alert-danger",
            "warning" => "alert-warning",
            _ => "alert-info"
        };
        alertIcon = type switch
        {
            "success" => "fa-check-circle",
            "error" => "fa-exclamation-triangle",
            "warning" => "fa-exclamation-triangle",
            _ => "fa-info-circle"
        };
        StateHasChanged();
    }
}
@page "/subjects"
@using PISA_APP.Models
@using PISA_APP.Services
@inject MockDataService DataService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>รายวิชา/เข้าสอบ</PageTitle>

@if (!AuthService.IsStudent())
{
    <div class="alert alert-danger">
        <i class="fas fa-exclamation-triangle"></i>
        คุณไม่มีสิทธิ์เข้าถึงหน้านี้ กรุณาเข้าสู่ระบบด้วยบัญชีนักศึกษา
    </div>
    return;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-book"></i>
                    รายวิชาและการสอบ
                </h2>
                <div class="btn-group">
                    <button class="btn btn-outline-primary @(filterType == "all" ? "active" : "")" 
                            @onclick='() => SetFilter("all")'>
                        <i class="fas fa-list"></i> ทั้งหมด
                    </button>
                    <button class="btn btn-outline-success @(filterType == "available" ? "active" : "")" 
                            @onclick='() => SetFilter("available")'>
                        <i class="fas fa-clock"></i> เปิดสอบ
                    </button>
                    <button class="btn btn-outline-warning @(filterType == "upcoming" ? "active" : "")" 
                            @onclick='() => SetFilter("upcoming")'>
                        <i class="fas fa-calendar-alt"></i> กำลังจะถึง
                    </button>
                    <button class="btn btn-outline-secondary @(filterType == "completed" ? "active" : "")" 
                            @onclick='() => SetFilter("completed")'>
                        <i class="fas fa-check-circle"></i> สอบแล้ว
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show">
                    <i class="fas @(isSuccess ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
                    @message
                    <button type="button" class="btn-close" @onclick="ClearMessage"></button>
                </div>
            }

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control" placeholder="ค้นหาวิชาหรือข้อสอบ..." 
                               @bind="searchTerm" @oninput="OnSearchChanged">
                    </div>
                </div>
                <div class="col-md-6">
                    <select class="form-select" value="@selectedSubjectId" @onchange="OnSubjectFilterChanged">
                        <option value="0">-- เลือกวิชา --</option>
                        @foreach (var subject in enrolledSubjects)
                        {
                            <option value="@subject.Id">@subject.Code - @subject.Name</option>
                        }
                    </select>
                </div>
            </div>

            @if (loading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">กำลังโหลด...</span>
                    </div>
                    <p class="mt-2">กำลังโหลดข้อมูล...</p>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var item in filteredExamData)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 @GetCardClass(item.Status)">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">
                                        <i class="fas fa-graduation-cap"></i>
                                        @item.Subject.Code
                                    </h6>
                                    <span class="badge @GetStatusBadgeClass(item.Status)">
                                        @GetStatusText(item.Status)
                                    </span>
                                </div>
                                <div class="card-body">
                                    <h6 class="card-title">@item.Subject.Name</h6>
                                    <h5 class="card-subtitle mb-2">@item.Exam.Title</h5>
                                    <p class="card-text small text-muted mb-2">@item.Exam.Description</p>
                                    
                                    <div class="row text-center mb-3">
                                        <div class="col-4">
                                            <small class="text-muted">ระยะเวลา</small>
                                            <div class="fw-bold">@item.Exam.Duration นาที</div>
                                        </div>
                                        <div class="col-4">
                                            <small class="text-muted">คะแนนเต็ม</small>
                                            <div class="fw-bold">@item.Exam.TotalPoints คะแนน</div>
                                        </div>
                                        <div class="col-4">
                                            <small class="text-muted">จำนวนข้อ</small>
                                            <div class="fw-bold">@item.Exam.Questions.Count ข้อ</div>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <small class="text-muted">เวลาเปิดสอบ:</small>
                                        <div class="small">@item.Exam.StartDate.ToString("dd/MM/yyyy HH:mm")</div>
                                        <small class="text-muted">เวลาปิดสอบ:</small>
                                        <div class="small">@item.Exam.EndDate.ToString("dd/MM/yyyy HH:mm")</div>
                                    </div>

                                    @if (item.Status == ExamStatus.Available)
                                    {
                                        <div class="alert alert-info small mb-2">
                                            <i class="fas fa-info-circle"></i>
                                            เหลือเวลา @GetTimeRemaining(item.Exam.EndDate)
                                        </div>
                                    }
                                    @if (item.Status == ExamStatus.Upcoming)
                                    {
                                        <div class="alert alert-warning small mb-2">
                                            <i class="fas fa-clock"></i>
                                            เปิดสอบใน @GetTimeRemaining(item.Exam.StartDate)
                                        </div>
                                    }
                                    @if (item.Status == ExamStatus.Completed && item.ExamResult != null)
                                    {
                                        <div class="alert alert-success small mb-2">
                                            <i class="fas fa-check-circle"></i>
                                            คะแนน: @item.ExamResult.Score/@item.ExamResult.TotalPoints 
                                            (@item.ExamResult.Percentage.ToString("F1")%)
                                        </div>
                                    }
                                </div>
                                <div class="card-footer">
                                    @if (item.Status == ExamStatus.Available)
                                    {
                                        <button class="btn btn-success w-100" @onclick="() => StartExam(item.Exam.Id)">
                                            <i class="fas fa-play"></i>
                                            เข้าสอบ
                                        </button>
                                    }
                                    else if (item.Status == ExamStatus.Upcoming)
                                    {
                                        <button class="btn btn-secondary w-100" disabled>
                                            <i class="fas fa-clock"></i>
                                            ยังไม่ถึงเวลาสอบ
                                        </button>
                                    }
                                    else if (item.Status == ExamStatus.Completed)
                                    {
                                        <button class="btn btn-info w-100" @onclick="() => ViewResult(item.ExamResult.Id)">
                                            <i class="fas fa-eye"></i>
                                            ดูผลการสอบ
                                        </button>
                                    }
                                    else if (item.Status == ExamStatus.Expired)
                                    {
                                        <button class="btn btn-danger w-100" disabled>
                                            <i class="fas fa-times-circle"></i>
                                            หมดเวลาแล้ว
                                        </button>
                                    }
                                    else if (item.Status == ExamStatus.InProgress)
                                    {
                                        <button class="btn btn-warning w-100" @onclick="() => ContinueExam(item.ExamResult.Id)">
                                            <i class="fas fa-play"></i>
                                            เข้าสอบต่อ
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>

                @if (!filteredExamData.Any())
                {
                    <div class="text-center p-5">
                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">ไม่พบข้อมูลการสอบ</h5>
                        <p class="text-muted">
                            @if (filterType == "available")
                            {
                                <span>ไม่มีข้อสอบที่เปิดให้สอบในขณะนี้</span>
                            }
                            else if (filterType == "upcoming")
                            {
                                <span>ไม่มีข้อสอบที่กำลังจะมาถึง</span>
                            }
                            else if (filterType == "completed")
                            {
                                <span>คุณยังไม่ได้สอบข้อสอบใดเลย</span>
                            }
                            else
                            {
                                <span>ไม่พบข้อสอบที่ตรงกับเงื่อนไขการค้นหา</span>
                            }
                        </p>
                    </div>
                }

                @if (totalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">
                                    <i class="fas fa-chevron-left"></i> ก่อนหน้า
                                </button>
                            </li>
                            
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                </li>
                            }
                            
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">
                                    ถัดไป <i class="fas fa-chevron-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Subject> enrolledSubjects = new();
    private List<ExamData> allExamData = new();
    private List<ExamData> filteredExamData = new();
    private List<ExamResult> studentResults = new();
    
    private string searchTerm = "";
    private string filterType = "all";
    private int selectedSubjectId = 0;
    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPages = 1;
    
    private bool loading = true;
    private string message = "";
    private bool isSuccess = false;

    public enum ExamStatus
    {
        Upcoming,    // ยังไม่ถึงเวลาสอบ
        Available,   // เปิดสอบแล้ว สามารถเข้าสอบได้
        InProgress,  // กำลังสอบอยู่ (เริ่มแล้วแต่ยังไม่เสร็จ)
        Completed,   // สอบเสร็จแล้ว
        Expired      // หมดเวลาแล้ว ไม่ได้สอบ
    }

    public class ExamData
    {
        public Subject Subject { get; set; } = new();
        public Exam Exam { get; set; } = new();
        public ExamResult? ExamResult { get; set; }
        public ExamStatus Status { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsStudent())
        {
            Navigation.NavigateTo("/unauthorized");
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        
        try
        {
            var currentStudent = AuthService.CurrentUser as Student;
            if (currentStudent == null) return;

            // โหลดวิชาที่นักศึกษาลงทะเบียน
            enrolledSubjects = DataService.GetAllSubjects()
                .Where(s => currentStudent.EnrolledSubjectIds.Contains(s.Id) && s.IsActive)
                .ToList();

            // โหลดผลการสอบของนักศึกษา
            studentResults = DataService.GetExamResultsByStudent(currentStudent.Id);

            // สร้าง ExamData
            allExamData = new List<ExamData>();
            
            foreach (var subject in enrolledSubjects)
            {
                var exams = DataService.GetExamsBySubject(subject.Id)
                    .Where(e => e.IsActive)
                    .ToList();

                foreach (var exam in exams)
                {
                    var result = studentResults.FirstOrDefault(r => r.ExamId == exam.Id);
                    var status = GetExamStatus(exam, result);

                    allExamData.Add(new ExamData
                    {
                        Subject = subject,
                        Exam = exam,
                        ExamResult = result,
                        Status = status
                    });
                }
            }

            // เรียงตามลำดับความสำคัญ: Available > InProgress > Upcoming > Completed > Expired
            allExamData = allExamData.OrderBy(e => e.Status switch
            {
                ExamStatus.Available => 1,
                ExamStatus.InProgress => 2,
                ExamStatus.Upcoming => 3,
                ExamStatus.Completed => 4,
                ExamStatus.Expired => 5,
                _ => 6
            }).ThenBy(e => e.Exam.StartDate).ToList();

            await ApplyFilters();
        }
        catch (Exception ex)
        {
            ShowMessage($"เกิดข้อผิดพลาดในการโหลดข้อมูล: {ex.Message}", false);
        }
        finally
        {
            loading = false;
        }
    }

    private ExamStatus GetExamStatus(Exam exam, ExamResult? result)
    {
        var now = DateTime.Now;

        if (result != null)
        {
            if (result.IsCompleted) return ExamStatus.Completed;
            if (result.StartTime != default && !result.IsCompleted) return ExamStatus.InProgress;
        }

        if (now < exam.StartDate) return ExamStatus.Upcoming;
        if (now > exam.EndDate) return ExamStatus.Expired;
        return ExamStatus.Available;
    }

    private async Task ApplyFilters()
    {
        var filtered = allExamData.AsEnumerable();

        // กรองตามประเภท
        filtered = filterType switch
        {
            "available" => filtered.Where(e => e.Status == ExamStatus.Available),
            "upcoming" => filtered.Where(e => e.Status == ExamStatus.Upcoming),
            "completed" => filtered.Where(e => e.Status == ExamStatus.Completed),
            "inprogress" => filtered.Where(e => e.Status == ExamStatus.InProgress),
            _ => filtered
        };

        // กรองตามวิชา
        if (selectedSubjectId > 0)
        {
            filtered = filtered.Where(e => e.Subject.Id == selectedSubjectId);
        }

        // กรองตามคำค้นหา
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var search = searchTerm.ToLower();
            filtered = filtered.Where(e => 
                e.Subject.Name.ToLower().Contains(search) ||
                e.Subject.Code.ToLower().Contains(search) ||
                e.Exam.Title.ToLower().Contains(search) ||
                e.Exam.Description.ToLower().Contains(search));
        }

        var totalItems = filtered.Count();
        totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
        
        if (currentPage > totalPages) currentPage = 1;

        filteredExamData = filtered
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        StateHasChanged();
    }

    private async Task SetFilter(string filter)
    {
        filterType = filter;
        currentPage = 1;
        await ApplyFilters();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        await Task.Delay(500); // Debounce
        await ApplyFilters();
    }

    private async Task OnSubjectFilterChanged(ChangeEventArgs e)
    {
        selectedSubjectId = int.TryParse(e.Value?.ToString(), out var id) ? id : 0;
        currentPage = 1;
        await ApplyFilters();
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        await ApplyFilters();
    }

    private string GetCardClass(ExamStatus status)
    {
        return status switch
        {
            ExamStatus.Available => "border-success",
            ExamStatus.InProgress => "border-warning",
            ExamStatus.Upcoming => "border-info",
            ExamStatus.Completed => "border-primary",
            ExamStatus.Expired => "border-danger",
            _ => ""
        };
    }

    private string GetStatusBadgeClass(ExamStatus status)
    {
        return status switch
        {
            ExamStatus.Available => "bg-success",
            ExamStatus.InProgress => "bg-warning text-dark",
            ExamStatus.Upcoming => "bg-info",
            ExamStatus.Completed => "bg-primary",
            ExamStatus.Expired => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(ExamStatus status)
    {
        return status switch
        {
            ExamStatus.Available => "เปิดสอบ",
            ExamStatus.InProgress => "กำลังสอบ",
            ExamStatus.Upcoming => "กำลังจะถึง",
            ExamStatus.Completed => "สอบแล้ว",
            ExamStatus.Expired => "หมดเวลา",
            _ => "ไม่ทราบสถานะ"
        };
    }

    private string GetTimeRemaining(DateTime targetTime)
    {
        var timeSpan = targetTime - DateTime.Now;
        
        if (timeSpan.TotalDays >= 1)
            return $"{(int)timeSpan.TotalDays} วัน {timeSpan.Hours} ชั่วโมง";
        else if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours} ชั่วโมง {timeSpan.Minutes} นาที";
        else if (timeSpan.TotalMinutes >= 1)
            return $"{(int)timeSpan.TotalMinutes} นาที";
        else
            return "น้อยกว่า 1 นาที";
    }

    private async Task StartExam(int examId)
    {
        try
        {
            var currentStudent = AuthService.CurrentUser as Student;
            if (currentStudent == null) return;

            // ตรวจสอบว่ามีการสอบอยู่แล้วหรือไม่
            var existingResult = studentResults.FirstOrDefault(r => r.ExamId == examId);
            if (existingResult != null && existingResult.IsCompleted)
            {
                ShowMessage("คุณได้สอบข้อสอบนี้เรียบร้อยแล้ว", false);
                return;
            }

            if (existingResult != null && !existingResult.IsCompleted)
            {
                // ถ้ามีการสอบที่ยังไม่เสร็จ ให้เข้าสู่หน้าสอบต่อ
                Navigation.NavigateTo($"/take-exam/{existingResult.Id}");
                return;
            }

            // สร้าง ExamResult ใหม่
            var newResult = new ExamResult
            {
                StudentId = currentStudent.Id,
                ExamId = examId,
                StartTime = DateTime.Now,
                IsCompleted = false,
                Answers = new List<StudentAnswer>()
            };

            DataService.AddExamResult(newResult);
            
            ShowMessage("เริ่มการสอบเรียบร้อยแล้ว กำลังนำไปยังหน้าสอบ...", true);
            
            await Task.Delay(1000);
            Navigation.NavigateTo($"/take-exam/{newResult.Id}");
        }
        catch (Exception ex)
        {
            ShowMessage($"เกิดข้อผิดพลาดในการเริ่มสอบ: {ex.Message}", false);
        }
    }

    private async Task ContinueExam(int resultId)
    {
        Navigation.NavigateTo($"/take-exam/{resultId}");
    }

    private async Task ViewResult(int resultId)
    {
        Navigation.NavigateTo($"/exam-results?result={resultId}");
    }

    private void ShowMessage(string msg, bool success)
    {
        message = msg;
        isSuccess = success;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        StateHasChanged();
    }
}
@page "/exam-results"
@using PISA_APP.Models
@using PISA_APP.Services
@inject MockDataService DataService
@inject AuthenticationService AuthService
@inject ModalService ModalService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>ผลการสอบ</PageTitle>

@if (!AuthService.IsStudent())
{
    <div class="alert alert-danger">
        <i class="fas fa-exclamation-triangle"></i>
        คุณไม่มีสิทธิ์เข้าถึงหน้านี้ กรุณาเข้าสู่ระบบด้วยบัญชีนักศึกษา
    </div>
    return;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-chart-bar"></i>
                    ผลการสอบ
                </h2>
                <div class="btn-group">
                    <button class="btn btn-success" @onclick="ExportToPDF">
                        <i class="fas fa-file-pdf"></i> Export PDF
                    </button>
                    <button class="btn btn-info" @onclick="ExportToCSV">
                        <i class="fas fa-file-csv"></i> Export CSV
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show">
                    <i class="fas @(isSuccess ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
                    @message
                    <button type="button" class="btn-close" @onclick="ClearMessage"></button>
                </div>
            }

            <!-- สถิติส่วนตัว -->
            @if (examResults.Any())
            {
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card text-center bg-primary text-white">
                            <div class="card-body">
                                <i class="fas fa-clipboard-list fa-2x mb-2"></i>
                                <h5>@examResults.Count</h5>
                                <small>จำนวนครั้งที่สอบ</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center bg-success text-white">
                            <div class="card-body">
                                <i class="fas fa-percentage fa-2x mb-2"></i>
                                <h5>@averageScore.ToString("F1")%</h5>
                                <small>คะแนนเฉลี่ย</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center bg-info text-white">
                            <div class="card-body">
                                <i class="fas fa-trophy fa-2x mb-2"></i>
                                <h5>@highestScore.ToString("F1")%</h5>
                                <small>คะแนนสูงสุด</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center bg-warning text-white">
                            <div class="card-body">
                                <i class="fas fa-clock fa-2x mb-2"></i>
                                <h5>@averageTimeSpent</h5>
                                <small>เวลาเฉลี่ยที่ใช้</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- กราฟแสดงผลงาน -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-chart-line"></i>
                            กราฟแสดงผลการสอบ
                        </h5>
                    </div>
                    <div class="card-body">
                        <canvas id="performanceChart" width="400" height="100"></canvas>
                    </div>
                </div>
            }

            <!-- ฟิลเตอร์และการค้นหา -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="form-label">ค้นหา</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="ค้นหาชื่อข้อสอบ..." 
                                       @bind="searchTerm" @oninput="OnSearchChanged">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">วิชา</label>
                            <select class="form-select" value="@selectedSubjectId" @onchange="OnSubjectFilterChanged">
                                <option value="0">-- ทุกวิชา --</option>
                                @foreach (var subject in enrolledSubjects)
                                {
                                    <option value="@subject.Id">@subject.Code - @subject.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">ผลการสอบ</label>
                            <select class="form-select" value="@selectedGradeFilter" @onchange="OnGradeFilterChanged">
                                <option value="">-- ทุกผลการสอบ --</option>
                                <option value="A">A (80-100%)</option>
                                <option value="B">B (70-79%)</option>
                                <option value="C">C (60-69%)</option>
                                <option value="D">D (50-59%)</option>
                                <option value="F">F (ต่ำกว่า 50%)</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">วันที่สอบ</label>
                            <input type="date" class="form-control" value="@(selectedDate?.ToString("yyyy-MM-dd"))" @onchange="OnDateFilterChanged">
                        </div>
                    </div>
                </div>
            </div>

            @if (loading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">กำลังโหลด...</span>
                    </div>
                    <p class="mt-2">กำลังโหลดข้อมูล...</p>
                </div>
            }
            else
            {
                <!-- ตารางแสดงผลการสอบ -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-list"></i>
                            รายการผลการสอบ
                        </h5>
                        <span class="badge bg-primary">รวม @filteredResults.Count รายการ</span>
                    </div>
                    <div class="card-body p-0">
                        @if (filteredResults.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>วิชา</th>
                                            <th>ชื่อข้อสอบ</th>
                                            <th>วันที่สอบ</th>
                                            <th>เวลาที่ใช้</th>
                                            <th>คะแนน</th>
                                            <th>เปอร์เซ็นต์</th>
                                            <th>เกรด</th>
                                            <th>การดำเนินการ</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in paginatedResults)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="fw-bold">@item.Subject.Code</div>
                                                    <small class="text-muted">@item.Subject.Name</small>
                                                </td>
                                                <td>
                                                    <div class="fw-bold">@item.Exam.Title</div>
                                                    <small class="text-muted">@item.Exam.Description</small>
                                                </td>
                                                <td>
                                                    <div>@item.Result.StartTime.ToString("dd/MM/yyyy")</div>
                                                    <small class="text-muted">@item.Result.StartTime.ToString("HH:mm")</small>
                                                </td>
                                                <td>
                                                    @if (item.Result.TimeTaken.HasValue)
                                                    {
                                                        <span>@FormatTimeSpan(item.Result.TimeTaken.Value)</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="fw-bold">@item.Result.Score</span>
                                                    <span class="text-muted">/@item.Result.TotalPoints</span>
                                                </td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="progress me-2" style="width: 60px; height: 8px;">
                                                            <div class="progress-bar @GetProgressBarClass(item.Result.Percentage)" 
                                                                 style="width: @item.Result.Percentage%"></div>
                                                        </div>
                                                        <span class="fw-bold">@item.Result.Percentage.ToString("F1")%</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge @GetGradeBadgeClass(GetGrade(item.Result.Percentage))">
                                                        @GetGrade(item.Result.Percentage)
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="btn-group">
                                                        <button class="btn btn-sm btn-outline-info" 
                                                                @onclick="() => ViewDetails(item.Result.Id)"
                                                                title="ดูรายละเอียด">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-success" 
                                                                @onclick="() => ViewAnswers(item.Result.Id)"
                                                                title="ดูคำตอบ">
                                                            <i class="fas fa-list-check"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            @if (totalPages > 1)
                            {
                                <div class="card-footer">
                                    <nav aria-label="Page navigation">
                                        <ul class="pagination justify-content-center mb-0">
                                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">
                                                    <i class="fas fa-chevron-left"></i> ก่อนหน้า
                                                </button>
                                            </li>
                                            
                                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                            {
                                                <li class="page-item @(i == currentPage ? "active" : "")">
                                                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                                </li>
                                            }
                                            
                                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">
                                                    ถัดไป <i class="fas fa-chevron-right"></i>
                                                </button>
                                            </li>
                                        </ul>
                                    </nav>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center p-5">
                                <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">ไม่พบผลการสอบ</h5>
                                <p class="text-muted">คุณยังไม่ได้สอบข้อสอบใดเลย หรือไม่พบผลการสอบที่ตรงกับเงื่อนไขการค้นหา</p>
                                <button class="btn btn-primary" @onclick="GoToSubjects">
                                    <i class="fas fa-book"></i>
                                    ไปหน้ารายวิชาและสอบ
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal สำหรับดูรายละเอียดผลการสอบ -->
<div class="modal fade" id="detailModal" tabindex="-1" aria-labelledby="detailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailModalLabel">
                    <i class="fas fa-chart-bar"></i>
                    รายละเอียดผลการสอบ
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedResult != null && selectedExam != null && selectedSubject != null)
                {
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>ข้อมูลการสอบ</h6>
                            <table class="table table-sm">
                                <tr>
                                    <td class="fw-bold">วิชา:</td>
                                    <td>@selectedSubject.Code - @selectedSubject.Name</td>
                                </tr>
                                <tr>
                                    <td class="fw-bold">ชื่อข้อสอบ:</td>
                                    <td>@selectedExam.Title</td>
                                </tr>
                                <tr>
                                    <td class="fw-bold">เวลาเริ่มสอบ:</td>
                                    <td>@selectedResult.StartTime.ToString("dd/MM/yyyy HH:mm")</td>
                                </tr>
                                <tr>
                                    <td class="fw-bold">เวลาส่งสอบ:</td>
                                    <td>@(selectedResult.EndTime?.ToString("dd/MM/yyyy HH:mm") ?? "ยังไม่ส่ง")</td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6>ผลการสอบ</h6>
                            <table class="table table-sm">
                                <tr>
                                    <td class="fw-bold">คะแนนที่ได้:</td>
                                    <td>@selectedResult.Score/@selectedResult.TotalPoints</td>
                                </tr>
                                <tr>
                                    <td class="fw-bold">เปอร์เซ็นต์:</td>
                                    <td>@selectedResult.Percentage.ToString("F1")%</td>
                                </tr>
                                <tr>
                                    <td class="fw-bold">เกรด:</td>
                                    <td>
                                        <span class="badge @GetGradeBadgeClass(GetGrade(selectedResult.Percentage))">
                                            @GetGrade(selectedResult.Percentage)
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="fw-bold">เวลาที่ใช้:</td>
                                    <td>
                                        @if (selectedResult.TimeTaken.HasValue)
                                        {
                                            <span>@FormatTimeSpan(selectedResult.TimeTaken.Value)</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">ไม่สามารถคำนวณได้</span>
                                        }
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>

                    @if (showAnswers && selectedResult.Answers.Any())
                    {
                        <h6>รายละเอียดคำตอบ</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead class="table-light">
                                    <tr>
                                        <th>ข้อ</th>
                                        <th>คำถาม</th>
                                        <th>คำตอบของคุณ</th>
                                        <th>คำตอบที่ถูก</th>
                                        <th>คะแนน</th>
                                        <th>ผล</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var answer in selectedResult.Answers)
                                    {
                                        var question = selectedExam.Questions.FirstOrDefault(q => q.Id == answer.QuestionId);
                                        if (question != null)
                                        {
                                            <tr class="@(answer.IsCorrect ? "table-success" : "table-danger")">
                                                <td>@(selectedResult.Answers.IndexOf(answer) + 1)</td>
                                                <td>
                                                    <div>@question.Text</div>
                                                    @if (question.Type == QuestionType.MultipleChoice && question.Options.Any())
                                                    {
                                                        <small class="text-muted">
                                                            ตัวเลือก: @string.Join(", ", question.Options)
                                                        </small>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="@(answer.IsCorrect ? "text-success fw-bold" : "text-danger fw-bold")">
                                                        @answer.Answer
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="text-success fw-bold">@question.CorrectAnswer</span>
                                                </td>
                                                <td>@answer.Points/@question.Points</td>
                                                <td>
                                                    @if (answer.IsCorrect)
                                                    {
                                                        <i class="fas fa-check text-success"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-times text-danger"></i>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                @if (!showAnswers)
                {
                    <button type="button" class="btn btn-info" @onclick="ShowAnswers">
                        <i class="fas fa-list-check"></i>
                        ดูคำตอบโดยละเอียด
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-secondary" @onclick="HideAnswers">
                        <i class="fas fa-eye-slash"></i>
                        ซ่อนคำตอบ
                    </button>
                }
                <button type="button" class="btn btn-primary" @onclick="CloseModal">
                    <i class="fas fa-times"></i>
                    ปิด
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] [SupplyParameterFromQuery] public int? result { get; set; }

    private List<Subject> enrolledSubjects = new();
    private List<ExamResult> examResults = new();
    private List<ExamResultData> filteredResults = new();
    private List<ExamResultData> paginatedResults = new();
    
    private string searchTerm = "";
    private int selectedSubjectId = 0;
    private string selectedGradeFilter = "";
    private DateTime? selectedDate;
    
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    
    private bool loading = true;
    private string message = "";
    private bool isSuccess = false;

    // สถิติ
    private double averageScore = 0;
    private double highestScore = 0;
    private string averageTimeSpent = "";

    // Modal
    private ExamResult? selectedResult;
    private Exam? selectedExam;
    private Subject? selectedSubject;
    private bool showAnswers = false;

    public class ExamResultData
    {
        public ExamResult Result { get; set; } = new();
        public Exam Exam { get; set; } = new();
        public Subject Subject { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!AuthService.IsStudent())
        {
            Navigation.NavigateTo("/unauthorized");
            return;
        }

        await LoadData();
        
        if (result.HasValue)
        {
            await ViewDetails(result.Value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && examResults.Any())
        {
            await DrawChart();
        }
    }

    private async Task LoadData()
    {
        loading = true;
        
        try
        {
            var currentStudent = AuthService.CurrentUser as Student;
            if (currentStudent == null) return;

            // โหลดวิชาที่นักศึกษาลงทะเบียน
            enrolledSubjects = DataService.GetAllSubjects()
                .Where(s => currentStudent.EnrolledSubjectIds.Contains(s.Id) && s.IsActive)
                .ToList();

            // โหลดผลการสอบของนักศึกษา
            examResults = DataService.GetExamResultsByStudent(currentStudent.Id)
                .Where(r => r.IsCompleted)
                .OrderByDescending(r => r.StartTime)
                .ToList();

            // คำนวณสถิติ
            CalculateStatistics();

            await ApplyFilters();
        }
        catch (Exception ex)
        {
            ShowMessage($"เกิดข้อผิดพลาดในการโหลดข้อมูล: {ex.Message}", false);
        }
        finally
        {
            loading = false;
        }
    }

    private void CalculateStatistics()
    {
        if (!examResults.Any()) return;

        averageScore = examResults.Average(r => r.Percentage);
        highestScore = examResults.Max(r => r.Percentage);
        
        var totalTimeSpent = examResults
            .Where(r => r.TimeTaken.HasValue)
            .Select(r => r.TimeTaken!.Value)
            .DefaultIfEmpty(TimeSpan.Zero)
            .Aggregate(TimeSpan.Zero, (sum, time) => sum.Add(time));

        var averageTime = totalTimeSpent.TotalSeconds / examResults.Count(r => r.TimeTaken.HasValue);
        averageTimeSpent = FormatTimeSpan(TimeSpan.FromSeconds(averageTime));
    }

    private async Task OnSubjectFilterChanged(ChangeEventArgs e)
    {
        selectedSubjectId = int.TryParse(e.Value?.ToString(), out var id) ? id : 0;
        await ApplyFilters();
    }

    private async Task OnGradeFilterChanged(ChangeEventArgs e)
    {
        selectedGradeFilter = e.Value?.ToString() ?? "";
        await ApplyFilters();
    }

    private async Task OnDateFilterChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            selectedDate = date;
        }
        else
        {
            selectedDate = null;
        }
        await ApplyFilters();
    }

    private async Task ApplyFilters()
    {
        var filtered = new List<ExamResultData>();

        foreach (var result in examResults)
        {
            var exam = DataService.GetExamById(result.ExamId);
            if (exam == null) continue;

            var subject = DataService.GetSubjectById(exam.SubjectId);
            if (subject == null) continue;

            // กรองตามวิชา
            if (selectedSubjectId > 0 && subject.Id != selectedSubjectId) continue;

            // กรองตามเกรด
            if (!string.IsNullOrEmpty(selectedGradeFilter))
            {
                var grade = GetGrade(result.Percentage);
                if (grade != selectedGradeFilter) continue;
            }

            // กรองตามวันที่
            if (selectedDate.HasValue)
            {
                if (result.StartTime.Date != selectedDate.Value.Date) continue;
            }

            // กรองตามคำค้นหา
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var search = searchTerm.ToLower();
                if (!exam.Title.ToLower().Contains(search) && 
                    !exam.Description.ToLower().Contains(search) &&
                    !subject.Name.ToLower().Contains(search) &&
                    !subject.Code.ToLower().Contains(search)) continue;
            }

            filtered.Add(new ExamResultData
            {
                Result = result,
                Exam = exam,
                Subject = subject
            });
        }

        filteredResults = filtered;
        
        // Pagination
        totalPages = (int)Math.Ceiling((double)filteredResults.Count / pageSize);
        if (currentPage > totalPages) currentPage = 1;

        paginatedResults = filteredResults
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        StateHasChanged();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        await Task.Delay(500); // Debounce
        await ApplyFilters();
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        await ApplyFilters();
    }

    private string GetGrade(double percentage)
    {
        return percentage switch
        {
            >= 80 => "A",
            >= 70 => "B",
            >= 60 => "C",
            >= 50 => "D",
            _ => "F"
        };
    }

    private string GetGradeBadgeClass(string grade)
    {
        return grade switch
        {
            "A" => "bg-success",
            "B" => "bg-info",
            "C" => "bg-warning text-dark",
            "D" => "bg-danger",
            "F" => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetProgressBarClass(double percentage)
    {
        return percentage switch
        {
            >= 80 => "bg-success",
            >= 70 => "bg-info",
            >= 60 => "bg-warning",
            >= 50 => "bg-danger",
            _ => "bg-dark"
        };
    }

    private string FormatTimeSpan(TimeSpan timeSpan)
    {
        if (timeSpan.TotalDays >= 1)
            return $"{(int)timeSpan.TotalDays} วัน {timeSpan.Hours} ชั่วโมง";
        else if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours} ชั่วโมง {timeSpan.Minutes} นาที";
        else
            return $"{timeSpan.Minutes} นาที {timeSpan.Seconds} วินาทีี";
    }

    private async Task ViewDetails(int resultId)
    {
        selectedResult = examResults.FirstOrDefault(r => r.Id == resultId);
        if (selectedResult != null)
        {
            selectedExam = DataService.GetExamById(selectedResult.ExamId);
            if (selectedExam != null)
            {
                selectedSubject = DataService.GetSubjectById(selectedExam.SubjectId);
            }
        }
        showAnswers = false;
        await ModalService.ShowAsync("detailModal");
    }

    private async Task ViewAnswers(int resultId)
    {
        await ViewDetails(resultId);
        showAnswers = true;
    }

    private void ShowAnswers()
    {
        showAnswers = true;
    }

    private void HideAnswers()
    {
        showAnswers = false;
    }

    private async Task CloseModal()
    {
        await ModalService.HideAsync("detailModal");
        selectedResult = null;
        selectedExam = null;
        selectedSubject = null;
        showAnswers = false;
        StateHasChanged();
    }

    private void GoToSubjects()
    {
        Navigation.NavigateTo("/subjects");
    }

    private async Task ExportToPDF()
    {
        try
        {
            var pdfData = GeneratePDFData();
            await JSRuntime.InvokeVoidAsync("downloadPDF", "exam-results.pdf", pdfData);
            ShowMessage("ส่งออกข้อมูลเป็น PDF เรียบร้อยแล้ว", true);
        }
        catch (Exception ex)
        {
            ShowMessage($"เกิดข้อผิดพลาดในการส่งออก PDF: {ex.Message}", false);
        }
    }

    private async Task ExportToCSV()
    {
        try
        {
            var csvData = GenerateCSVData();
            await JSRuntime.InvokeVoidAsync("downloadCSV", "exam-results.csv", csvData);
            ShowMessage("ส่งออกข้อมูลเป็น CSV เรียบร้อยแล้ว", true);
        }
        catch (Exception ex)
        {
            ShowMessage($"เกิดข้อผิดพลาดในการส่งออก CSV: {ex.Message}", false);
        }
    }

    private string GeneratePDFData()
    {
        // ในระบบจริงควรใช้ library สำหรับสร้าง PDF
        return "PDF data would be generated here";
    }

    private string GenerateCSVData()
    {
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("วิชา,ชื่อข้อสอบ,วันที่สอบ,เวลาที่ใช้,คะแนน,เปอร์เซ็นต์,เกรด");
        
        foreach (var item in filteredResults)
        {
            var timeUsed = item.Result.TimeTaken?.TotalMinutes.ToString("F0") ?? "0";
            csv.AppendLine($"{item.Subject.Code},{item.Exam.Title},{item.Result.StartTime:dd/MM/yyyy},{timeUsed} นาที,{item.Result.Score}/{item.Result.TotalPoints},{item.Result.Percentage:F1}%,{GetGrade(item.Result.Percentage)}");
        }
        
        return csv.ToString();
    }

    private async Task DrawChart()
    {
        if (!examResults.Any()) return;

        try
        {
            var chartData = examResults
                .OrderBy(r => r.StartTime)
                .Take(10)
                .Select(r => new { 
                    Date = r.StartTime.ToString("dd/MM"), 
                    Score = r.Percentage 
                })
                .ToList();

            await JSRuntime.InvokeVoidAsync("drawPerformanceChart", chartData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error drawing chart: {ex.Message}");
        }
    }

    private void ShowMessage(string msg, bool success)
    {
        message = msg;
        isSuccess = success;
        StateHasChanged();
    }

    private void ClearMessage()
    {
        message = "";
        StateHasChanged();
    }
}

<script>
    window.downloadPDF = (filename, data) => {
        // ใช้ jsPDF library ในการสร้าง PDF จริง
        alert('PDF Export feature - ต้องติดตั้ง jsPDF library');
    };

    window.downloadCSV = (filename, csvData) => {
        const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    window.drawPerformanceChart = (data) => {
        try {
            const ctx = document.getElementById('performanceChart');
            if (!ctx || !data || data.length === 0) return;

            // กรองข้อมูลที่ไม่ถูกต้อง
            const validData = data.filter(d => d && typeof d.Score === 'number' && !isNaN(d.Score));
            if (validData.length === 0) return;

            const maxScore = Math.max(...validData.map(d => d.Score));
            let chartHTML = '<div class="d-flex align-items-end justify-content-around" style="height: 200px;">';
            
            validData.forEach(item => {
                const score = item.Score || 0;
                const height = maxScore > 0 ? (score / maxScore) * 150 : 0;
                const color = score >= 80 ? '#28a745' : score >= 60 ? '#ffc107' : '#dc3545';
                chartHTML += `
                    <div class="text-center">
                        <div style="height: ${height}px; width: 30px; background-color: ${color}; margin-bottom: 5px;"></div>
                        <small>${item.Date || ''}</small><br>
                        <small>${score.toFixed(1)}%</small>
                    </div>
                `;
            });
            
            chartHTML += '</div>';
            ctx.innerHTML = chartHTML;
        } catch (error) {
            console.error('Error drawing chart:', error);
        }
    };
</script>
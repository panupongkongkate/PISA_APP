@typeparam TItem
@using PISA_APP.Models

<div class="table-container">
    <!-- Search & Filter Controls -->
    <div class="table-controls mb-3">
        <div class="row">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text" class="form-control" placeholder="@SearchPlaceholder" 
                           @bind="SearchTerm" @oninput="OnSearchChanged" />
                </div>
            </div>
            <div class="col-md-3">
                @if (FilterOptions != null)
                {
                    <select class="form-select" @bind="SelectedFilter" @bind:after="OnFilterChanged">
                        <option value="">ทั้งหมด</option>
                        @foreach (var option in FilterOptions)
                        {
                            <option value="@option.Value">@option.Text</option>
                        }
                    </select>
                }
            </div>
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text">แสดง</span>
                    <select class="form-select" @bind="Pagination.PageSize" @bind:after="OnPageSizeChanged">
                        @foreach (var size in PaginationModel.PageSizeOptions)
                        {
                            <option value="@size">@size</option>
                        }
                    </select>
                    <span class="input-group-text">รายการ</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            @TableHeader
            <tbody>
                @if (PaginatedItems?.Any() == true)
                {
                    @foreach (var item in PaginatedItems)
                    {
                        @TableRow(item)
                    }
                }
                else
                {
                    <tr>
                        <td colspan="100%" class="text-center text-muted py-4">
                            @if (!string.IsNullOrEmpty(SearchTerm))
                            {
                                <div>
                                    <i class="fas fa-search fa-2x mb-2"></i>
                                    <p>ไม่พบข้อมูลที่ตรงกับ "@SearchTerm"</p>
                                </div>
                            }
                            else
                            {
                                <div>
                                    <i class="fas fa-inbox fa-2x mb-2"></i>
                                    <p>ไม่มีข้อมูล</p>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    @if (Pagination.TotalPages > 1)
    {
        <div class="pagination-container d-flex justify-content-between align-items-center mt-3">
            <div class="pagination-info">
                <span class="text-muted">
                    แสดง @Pagination.StartItem-@Pagination.EndItem จาก @Pagination.TotalItems รายการ
                </span>
            </div>
            
            <nav aria-label="Table pagination">
                <ul class="pagination mb-0">
                    <!-- First & Previous -->
                    <li class="page-item @(Pagination.HasPrevious ? "" : "disabled")">
                        <button class="page-link" @onclick="() => GoToPageAsync(1)" disabled="@(!Pagination.HasPrevious)">
                            <i class="fas fa-angle-double-left"></i>
                        </button>
                    </li>
                    <li class="page-item @(Pagination.HasPrevious ? "" : "disabled")">
                        <button class="page-link" @onclick="() => GoToPageAsync(Pagination.CurrentPage - 1)" disabled="@(!Pagination.HasPrevious)">
                            <i class="fas fa-angle-left"></i>
                        </button>
                    </li>

                    <!-- Page Numbers -->
                    @foreach (var pageNum in Pagination.GetPageNumbers())
                    {
                        @if (pageNum == -1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        else
                        {
                            <li class="page-item @(pageNum == Pagination.CurrentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => GoToPageAsync(pageNum)">@pageNum</button>
                            </li>
                        }
                    }

                    <!-- Next & Last -->
                    <li class="page-item @(Pagination.HasNext ? "" : "disabled")">
                        <button class="page-link" @onclick="() => GoToPageAsync(Pagination.CurrentPage + 1)" disabled="@(!Pagination.HasNext)">
                            <i class="fas fa-angle-right"></i>
                        </button>
                    </li>
                    <li class="page-item @(Pagination.HasNext ? "" : "disabled")">
                        <button class="page-link" @onclick="() => GoToPageAsync(Pagination.TotalPages)" disabled="@(!Pagination.HasNext)">
                            <i class="fas fa-angle-double-right"></i>
                        </button>
                    </li>
                </ul>
            </nav>

            <!-- Go to Page -->
            <div class="go-to-page">
                <div class="input-group input-group-sm" style="width: 120px;">
                    <span class="input-group-text">หน้า</span>
                    <input type="number" class="form-control" @bind="goToPageInput" 
                           @onkeypress="OnGoToPageKeyPress" min="1" max="@Pagination.TotalPages" />
                    <button class="btn btn-outline-secondary" @onclick="GoToInputPage">
                        <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public IEnumerable<TItem> Items { get; set; } = new List<TItem>();
    [Parameter] public RenderFragment TableHeader { get; set; } = default!;
    [Parameter] public RenderFragment<TItem> TableRow { get; set; } = default!;
    [Parameter] public string SearchPlaceholder { get; set; } = "ค้นหา...";
    [Parameter] public Func<TItem, string, bool> SearchFilter { get; set; } = default!;
    [Parameter] public List<FilterOption>? FilterOptions { get; set; }
    [Parameter] public Func<TItem, string, bool>? ItemFilter { get; set; }
    [Parameter] public EventCallback<PaginationModel> OnPaginationChanged { get; set; }

    private PaginationModel Pagination = new();
    private List<TItem> FilteredItems = new();
    private List<TItem> PaginatedItems = new();
    private string SearchTerm = string.Empty;
    private string SelectedFilter = string.Empty;
    private int goToPageInput = 1;

    protected override void OnParametersSet()
    {
        UpdateFilteredItems();
        UpdatePagination();
        UpdatePaginatedItems();
    }

    private void UpdateFilteredItems()
    {
        FilteredItems = Items.ToList();

        // Apply search filter
        if (!string.IsNullOrEmpty(SearchTerm) && SearchFilter != null)
        {
            FilteredItems = FilteredItems.Where(item => SearchFilter(item, SearchTerm)).ToList();
        }

        // Apply additional filter
        if (!string.IsNullOrEmpty(SelectedFilter) && ItemFilter != null)
        {
            FilteredItems = FilteredItems.Where(item => ItemFilter(item, SelectedFilter)).ToList();
        }
    }

    private void UpdatePagination()
    {
        Pagination.TotalItems = FilteredItems.Count;
        if (Pagination.CurrentPage > Pagination.TotalPages && Pagination.TotalPages > 0)
        {
            Pagination.CurrentPage = 1;
        }
        goToPageInput = Pagination.CurrentPage;
    }

    private void UpdatePaginatedItems()
    {
        var skip = (Pagination.CurrentPage - 1) * Pagination.PageSize;
        PaginatedItems = FilteredItems.Skip(skip).Take(Pagination.PageSize).ToList();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;
        Pagination.CurrentPage = 1;
        UpdateFilteredItems();
        UpdatePagination();
        UpdatePaginatedItems();
        await OnPaginationChanged.InvokeAsync(Pagination);
    }

    private async Task OnFilterChanged()
    {
        Pagination.CurrentPage = 1;
        UpdateFilteredItems();
        UpdatePagination();
        UpdatePaginatedItems();
        await OnPaginationChanged.InvokeAsync(Pagination);
    }

    private async Task OnPageSizeChanged()
    {
        Pagination.CurrentPage = 1;
        UpdatePagination();
        UpdatePaginatedItems();
        await OnPaginationChanged.InvokeAsync(Pagination);
    }

    private async Task GoToPageAsync(int page)
    {
        if (page >= 1 && page <= Pagination.TotalPages)
        {
            Pagination.CurrentPage = page;
            goToPageInput = page;
            UpdatePaginatedItems();
            await OnPaginationChanged.InvokeAsync(Pagination);
        }
    }

    private async Task GoToInputPage()
    {
        await GoToPageAsync(goToPageInput);
    }

    private async Task OnGoToPageKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await GoToInputPage();
        }
    }

    public class FilterOption
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
    }
}